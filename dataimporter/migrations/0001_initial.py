# -*- coding: utf-8 -*-
# Generated by Django 1.10 on 2017-03-29 13:30
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django_mysql.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('social_django', '0006_partial'),
    ]

    operations = [
        migrations.CreateModel(
            name='AlgoliaIndex',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('settings', django_mysql.models.JSONField(default=dict)),
            ],
        ),
        migrations.CreateModel(
            name='DeletedUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('user_id', models.IntegerField()),
                ('email', models.CharField(blank=True, max_length=200, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Invite',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('email', models.CharField(max_length=200)),
                ('consumed', models.BooleanField(default=False)),
                ('user_id', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='SyncedObject',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('index_name', models.CharField(max_length=100)),
                ('last_synced', models.DateTimeField(blank=True, null=True)),
                ('last_updated', models.DateTimeField(null=True)),
                ('last_updated_ts', models.BigIntegerField(null=True)),
                ('download_status', models.IntegerField(choices=[(1, 'Pending'), (2, 'Processing'), (3, 'Ready')], default=1)),
                ('primary_keywords', models.CharField(blank=True, max_length=500, null=True)),
                ('secondary_keywords', models.CharField(blank=True, max_length=500, null=True)),
                ('gdrive_document_id', models.CharField(max_length=200, null=True)),
                ('gdrive_title', models.CharField(blank=True, max_length=500, null=True)),
                ('pipedrive_deal_id', models.CharField(blank=True, max_length=50, null=True)),
                ('pipedrive_title', models.CharField(blank=True, max_length=500, null=True)),
                ('helpscout_customer_id', models.CharField(blank=True, max_length=50, null=True)),
                ('helpscout_title', models.CharField(blank=True, max_length=500, null=True)),
                ('helpscout_document_id', models.CharField(blank=True, max_length=50, null=True)),
                ('helpscout_document_title', models.CharField(blank=True, max_length=500, null=True)),
                ('jira_issue_key', models.CharField(blank=True, max_length=50, null=True)),
                ('jira_issue_title', models.CharField(blank=True, max_length=500, null=True)),
                ('github_title', models.CharField(blank=True, max_length=500, null=True)),
                ('github_repo_id', models.CharField(blank=True, max_length=50, null=True)),
                ('github_commit_id', models.CharField(blank=True, max_length=50, null=True)),
                ('github_file_id', models.CharField(blank=True, max_length=50, null=True)),
                ('github_issue_id', models.CharField(blank=True, max_length=50, null=True)),
                ('trello_title', models.CharField(blank=True, max_length=500, null=True)),
                ('trello_board_id', models.CharField(blank=True, max_length=50, null=True)),
                ('trello_card_id', models.CharField(blank=True, max_length=50, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('index_settings', django_mysql.models.JSONField(default=dict)),
                ('quota_users', models.IntegerField()),
                ('quota_objects', models.IntegerField()),
                ('index', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='dataimporter.AlgoliaIndex')),
            ],
        ),
        migrations.CreateModel(
            name='TeamIntegration',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=100)),
                ('settings', django_mysql.models.JSONField(default=dict)),
                ('social_auth', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='social_django.UserSocialAuth')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='team_integrations', to='dataimporter.Team')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='UserAttributes',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('team_admin', models.BooleanField(default=False)),
                ('segment_identify', models.BooleanField(default=True)),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dataimporter.Team')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserIntegration',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=100)),
                ('settings', django_mysql.models.JSONField(default=dict)),
                ('social_auth', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='social_django.UserSocialAuth')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_integrations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='syncedobject',
            name='team',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='dataimporter.Team'),
        ),
        migrations.AddField(
            model_name='syncedobject',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='invite',
            name='team',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dataimporter.Team'),
        ),
    ]
